<?xml version="1.0" ?><OrchExportInfo><Time>Mon Feb 22 08:13:10 UTC 2016</Time><User>SPRINT-FINAL UCSD Workflows</User><Comments>Provision VM with static IP
Provision Additional NICs
Provision Additional Harddrives
Install Custom s/w
Windows Customizations
</Comments><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data>{"checksum":"60369afb662b4aadf3f07d67f5d22c0e4fc81843","data":""}</data></featureAssetEntry><type>WORKFLOWS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"ChopDatastoreName","taskLabel":"ChopDatastoreName","isActive":true,"taskSummary":"ChopDatastoreName - need 1st one","taskDescription":"","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 1 inputs\r\n   input (Label: \'input\', Type: text, MappableType: dataStoreName)\r\n\r\nTask contains 1 outputs\r\n   output (Description: \'output\', Type: dataStoreName)\r\n\r\n","taskData":"eyJuYW1lIjoiQ2hvcERhdGFzdG9yZU5hbWUiLCJsYWJlbCI6IkNob3BEYXRhc3RvcmVOYW1lIiwicmVnaXN0ZXJVbmRlclRyZWUiOiJDdXN0b20gT3JmIiwiaXNBY3RpdmUiOnRydWUsInN1bW1hcnkiOiJDaG9wRGF0YXN0b3JlTmFtZSAtIG5lZWQgMXN0IG9uZSIsImRlc2NyaXB0aW9uIjoiIiwidWNzZEZyb21WZXJzaW9uIjpudWxsLCJjb25maWciOnsibmFtZSI6IklucHV0Q29uZmlnIiwiZmllbGRzIjp7Imxpc3QiOlt7Im5hbWUiOiJpbnB1dCIsImxhYmVsIjoiaW5wdXQiLCJwZXJzaXN0Ijp0cnVlLCJjb2x1bW5JbmZvIjpudWxsLCJ0eXBlIjoidGV4dCIsIm1hcFRvVHlwZSI6ImRhdGFTdG9yZU5hbWUiLCJtYW5kYXRvcnkiOmZhbHNlLCJyYmlkIjoiIiwic2l6ZSI6Im1lZGl1bSIsImhlbHAiOiIiLCJhbm5vdGF0aW9uIjoiIiwiZ3JvdXAiOiIiLCJ2YWxpZGF0ZSI6ZmFsc2UsImZvcm1NYW5hZ2VkVGFibGUiOmZhbHNlLCJhZGRFbnRyeUZvcm0iOiIiLCJlZGl0RW50cnlGb3JtIjoiIiwiZGVsZXRlRW50cnlGb3JtIjoiIiwibW92ZVVwRm9ybSI6IiIsIm1vdmVEb3duRm9ybSI6IiIsImluZm9FbnRyeUZvcm0iOiIiLCJydW5BY3Rpb25Gb3JtIjoiIiwiZWRpdGFiZSI6dHJ1ZSwiaGlkZGVuIjpmYWxzZSwibXVsdGlsaW5lIjpmYWxzZSwibWF4TGVuZ3RoIjoxMjgsImxvdiI6IiIsImxvdlByb3ZpZGVyIjoiIiwib3JkZXIiOjk5OTk5LCJ1cGxvYWREaXIiOiIiLCJ0YWJsZSI6IiIsInZhbGlkYXRvciI6IiIsInJlZ2V4IjoiLioiLCJyZWdleExhYmVsIjoiLioiLCJtaW5WYWx1ZSI6LTkyMjMzNzIwMzY4NTQ3NzU4MDgsIm1heFZhbHVlIjo5MjIzMzcyMDM2ODU0Nzc1ODA3LCJoaWRlRmllbGROYW1lIjoiIiwiaGlkZUZpZWxkVmFsdWUiOiIiLCJoaWRlRmllbGRDb25kaXRpb24iOiJFUSIsImh0bWxQb3B1cFRhZyI6IiIsImh0bWxQb3B1cExhYmVsIjoiIiwiaHRtbFBvcHVwU3R5bGUiOjAsImh0bWxQb3B1cFRleHQiOiIiLCJ2aWV3IjoiIiwidmFsdWVzIjpbXX1dLCJtb1R5cGVOYW1lIjoiY29tLmNsb3VwaWEuc2VydmljZS5jSU0uaW5mcmFtZ3IubWR1aS5NRFVJRmllbGREZXNjciIsInZhbGlkYXRvck5hbWUiOiJNRFVJRmllbGRMaXN0VmFsaWRhdG9yIn19LCJvdXRwdXRzIjp7Imxpc3QiOlt7Im5hbWUiOiJvdXRwdXQiLCJkZXNjcmlwdGlvbiI6Im91dHB1dCIsInR5cGUiOiJkYXRhU3RvcmVOYW1lIn1dLCJtb1R5cGVOYW1lIjoiY29tLmNsb3VwaWEuc2VydmljZS5jSU0uaW5mcmFtZ3IubWR1aS5NRFVJV29ya2Zsb3dUYXNrT3V0cHV0RGVzY3IiLCJ2YWxpZGF0b3JOYW1lIjoiTURVSU91dHB1dExpc3RWYWxpZGF0b3IifSwiZXhlY3V0aW9uTGFuZyI6IkphdmFzY3JpcHQiLCJleGVjdXRpb25TY3JpcHQiOiJpbXBvcnRQYWNrYWdlKGphdmEudXRpbCk7XG5pbXBvcnRQYWNrYWdlKGphdmEubGFuZyk7XG5pbXBvcnRQYWNrYWdlKGphdmEuaW8pO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5tb2RlbC5jRXZlbnQubm90aWZ5KTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubW9kZWwuY0lNKTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubGliLnV0aWwubWFpbCk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLmZ3Lm9ianN0b3JlKTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubGliLnV0aWwubWFuYWdlZHJlcG9ydHMpO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5zZXJ2aWNlLmNJTS5pbmZyYW1ncik7XG5cbi8vdmFyIEhvc3RuYW1lMSA9ICBbIGN0eHQuZ2V0SW5wdXQoXCJIb3N0bmFtZVwiKSBdO1xuLy92YXIgc2VsZWN0aW9uID0gY3R4dC5nZXRJbnB1dChcIklucHV0XCIpO1xudmFyIHNlbGVjdGlvbiA9IGlucHV0LmlucHV0OyBcblxuLy8gU3BsaXQgYnkgY29tbWFcbnZhciB2cyA9IHNlbGVjdGlvbi5zcGxpdChcJ1xcXFwsXCcpO1xuXG5sb2dnZXIuYWRkSW5mbyhcIklucHV0Li4uLi4uLi4uLi4uLi4uOiBcIiArIHNlbGVjdGlvbik7XG5sb2dnZXIuYWRkSW5mbyhcIlNlY3Rpb24gMC4uLi4uLi4uLi4uLi4uLjogXCIgKyB2c1swXSk7XG5sb2dnZXIuYWRkSW5mbyhcIlNlY3Rpb24gMS4uLi4uLi4uLi4uLi4uLjogXCIgKyB2c1sxXSk7XG5sb2dnZXIuYWRkSW5mbyhcIlNlY3Rpb24gMi4uLi4uLi4uLi4uLi4uLjogXCIgKyB2c1syXSk7XG5sb2dnZXIuYWRkSW5mbyhcIlNlY3Rpb24gMy4uLi4uLi4uLi4uLi4uLjogXCIgKyB2c1szXSk7XG5sb2dnZXIuYWRkSW5mbyhcIlNlY3Rpb24gNC4uLi4uLi4uLi4uLi4uLjogXCIgKyB2c1s0XSk7XG5sb2dnZXIuYWRkSW5mbyhcIlNlY3Rpb24gNS4uLi4uLi4uLi4uLi4uLjogXCIgKyB2c1s1XSk7XG5sb2dnZXIuYWRkSW5mbyhcIlNlY3Rpb24gNi4uLi4uLi4uLi4uLi4uLjogXCIgKyB2c1s2XSk7XG5sb2dnZXIuYWRkSW5mbyhcIlNlY3Rpb24gNy4uLi4uLi4uLi4uLi4uLjogXCIgKyB2c1s3XSk7XG5cbi8vY3R4dC51cGRhdGVJbnB1dChcIkhvc3RuYW1lXCIsIHZzWzBdKTtcblxub3V0cHV0Lm91dHB1dCA9IHZzWzBdO1xuY3R4dC5leGl0KCk7XG5cbiIsImNvbnRyb2xsZXJJbXBsIjp7Imxpc3QiOltdLCJtb1R5cGVOYW1lIjoiY29tLmNsb3VwaWEubGliLmNNYWNyb1VJLk1hY3JvQ29udHJvbGxlclNjcmlwdCIsInZhbGlkYXRvck5hbWUiOm51bGx9fQ=="}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"getVM","taskLabel":"getVM","isActive":true,"taskSummary":"VmID in --> VM out","taskDescription":"","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 1 inputs\r\n   vmID (Label: \'vmID\', Type: text, MappableType: gen_text_input)\r\n\r\nTask contains 1 outputs\r\n   VM (Description: \'\', Type: vm)\r\n\r\n","taskData":"eyJuYW1lIjoiZ2V0Vk0iLCJsYWJlbCI6ImdldFZNIiwicmVnaXN0ZXJVbmRlclRyZWUiOiJTUFJJTlQiLCJpc0FjdGl2ZSI6dHJ1ZSwic3VtbWFyeSI6IlZtSUQgaW4gLS0+IFZNIG91dCIsImRlc2NyaXB0aW9uIjoiIiwidWNzZEZyb21WZXJzaW9uIjoiNS4zLjIuMCIsImNvbmZpZyI6eyJuYW1lIjoiSW5wdXRDb25maWciLCJmaWVsZHMiOnsibGlzdCI6W3sibmFtZSI6InZtSUQiLCJsYWJlbCI6InZtSUQiLCJwZXJzaXN0Ijp0cnVlLCJjb2x1bW5JbmZvIjpudWxsLCJ0eXBlIjoidGV4dCIsIm1hcFRvVHlwZSI6Imdlbl90ZXh0X2lucHV0IiwibWFuZGF0b3J5IjpmYWxzZSwicmJpZCI6IiIsInNpemUiOiJtZWRpdW0iLCJoZWxwIjoiIiwiYW5ub3RhdGlvbiI6IiIsImdyb3VwIjoiIiwidmFsaWRhdGUiOmZhbHNlLCJmb3JtTWFuYWdlZFRhYmxlIjpmYWxzZSwiYWRkRW50cnlGb3JtIjoiIiwiZWRpdEVudHJ5Rm9ybSI6IiIsImRlbGV0ZUVudHJ5Rm9ybSI6IiIsIm1vdmVVcEZvcm0iOiIiLCJtb3ZlRG93bkZvcm0iOiIiLCJpbmZvRW50cnlGb3JtIjoiIiwicnVuQWN0aW9uRm9ybSI6IiIsImVkaXRhYmUiOnRydWUsImhpZGRlbiI6ZmFsc2UsIm11bHRpbGluZSI6ZmFsc2UsIm1heExlbmd0aCI6MTI4LCJsb3YiOiIiLCJsb3ZQcm92aWRlciI6IiIsIm9yZGVyIjo5OTk5OSwidXBsb2FkRGlyIjoiIiwidGFibGUiOiIiLCJ2YWxpZGF0b3IiOiIiLCJyZWdleCI6Ii4qIiwicmVnZXhMYWJlbCI6Ii4qIiwibWluVmFsdWUiOi05MjIzMzcyMDM2ODU0Nzc1ODA4LCJtYXhWYWx1ZSI6OTIyMzM3MjAzNjg1NDc3NTgwNywiaGlkZUZpZWxkTmFtZSI6IiIsImhpZGVGaWVsZFZhbHVlIjoiIiwiaGlkZUZpZWxkQ29uZGl0aW9uIjoiRVEiLCJodG1sUG9wdXBUYWciOiIiLCJodG1sUG9wdXBMYWJlbCI6IiIsImh0bWxQb3B1cFN0eWxlIjowLCJodG1sUG9wdXBUZXh0IjoiIiwidmlldyI6IiIsInZhbHVlcyI6W119XSwibW9UeXBlTmFtZSI6ImNvbS5jbG91cGlhLnNlcnZpY2UuY0lNLmluZnJhbWdyLm1kdWkuTURVSUZpZWxkRGVzY3IiLCJ2YWxpZGF0b3JOYW1lIjoiTURVSUZpZWxkTGlzdFZhbGlkYXRvciJ9fSwib3V0cHV0cyI6eyJsaXN0IjpbeyJuYW1lIjoiVk0iLCJkZXNjcmlwdGlvbiI6IiIsInR5cGUiOiJ2bSJ9XSwibW9UeXBlTmFtZSI6ImNvbS5jbG91cGlhLnNlcnZpY2UuY0lNLmluZnJhbWdyLm1kdWkuTURVSVdvcmtmbG93VGFza091dHB1dERlc2NyIiwidmFsaWRhdG9yTmFtZSI6Ik1EVUlPdXRwdXRMaXN0VmFsaWRhdG9yIn0sImV4ZWN1dGlvbkxhbmciOiJKYXZhc2NyaXB0IiwiZXhlY3V0aW9uU2NyaXB0IjoiaW1wb3J0UGFja2FnZShqYXZhLnV0aWwpO1xuaW1wb3J0UGFja2FnZShqYXZhLmxhbmcpO1xuaW1wb3J0UGFja2FnZShqYXZhLmlvKTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubW9kZWwuY0V2ZW50Lm5vdGlmeSk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLm1vZGVsLmNJTSk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLmxpYi51dGlsLm1haWwpO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5mdy5vYmpzdG9yZSk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLmxpYi51dGlsLm1hbmFnZWRyZXBvcnRzKTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEuc2VydmljZS5jSU0uaW5mcmFtZ3IpO1xuXG5cblxuXG5vdXRwdXQuVk0gPSBpbnB1dC52bUlEOyBcblxuIiwiY29udHJvbGxlckltcGwiOnsibGlzdCI6W10sIm1vVHlwZU5hbWUiOiJjb20uY2xvdXBpYS5saWIuY01hY3JvVUkuTWFjcm9Db250cm9sbGVyU2NyaXB0IiwidmFsaWRhdG9yTmFtZSI6bnVsbH19"}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"SPRINT-ProvisionVM-PostProv-ForLoopDrives","taskLabel":"SPRINT-ProvisionVM-PostProv-ForLoopDrives","isActive":true,"taskSummary":"","taskDescription":"","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 1 inputs\r\n   DriveDetails (Label: \'DriveDetails\', Type: text, MappableType: gen_text_input)\r\n\r\nTask contains 3 outputs\r\n   DriveLetter (Description: \'\', Type: OrfWindowsDriveLetter)\r\n   DriveSize (Description: \'\', Type: OrfDiskSize)\r\n   DriveType (Description: \'\', Type: DiskType)\r\n\r\n","taskData":"eyJuYW1lIjoiU1BSSU5ULVByb3Zpc2lvblZNLVBvc3RQcm92LUZvckxvb3BEcml2ZXMiLCJsYWJlbCI6IlNQUklOVC1Qcm92aXNpb25WTS1Qb3N0UHJvdi1Gb3JMb29wRHJpdmVzIiwicmVnaXN0ZXJVbmRlclRyZWUiOiJTUFJJTlQiLCJpc0FjdGl2ZSI6dHJ1ZSwic3VtbWFyeSI6IiIsImRlc2NyaXB0aW9uIjoiIiwidWNzZEZyb21WZXJzaW9uIjoiNS4zLjIuMCIsImNvbmZpZyI6eyJuYW1lIjoiSW5wdXRDb25maWciLCJmaWVsZHMiOnsibGlzdCI6W3sibmFtZSI6IkRyaXZlRGV0YWlscyIsImxhYmVsIjoiRHJpdmVEZXRhaWxzIiwicGVyc2lzdCI6dHJ1ZSwiY29sdW1uSW5mbyI6bnVsbCwidHlwZSI6InRleHQiLCJtYXBUb1R5cGUiOiJnZW5fdGV4dF9pbnB1dCIsIm1hbmRhdG9yeSI6ZmFsc2UsInJiaWQiOiIiLCJzaXplIjoibWVkaXVtIiwiaGVscCI6IiIsImFubm90YXRpb24iOiIiLCJncm91cCI6IiIsInZhbGlkYXRlIjpmYWxzZSwiZm9ybU1hbmFnZWRUYWJsZSI6ZmFsc2UsImFkZEVudHJ5Rm9ybSI6IiIsImVkaXRFbnRyeUZvcm0iOiIiLCJkZWxldGVFbnRyeUZvcm0iOiIiLCJtb3ZlVXBGb3JtIjoiIiwibW92ZURvd25Gb3JtIjoiIiwiaW5mb0VudHJ5Rm9ybSI6IiIsInJ1bkFjdGlvbkZvcm0iOiIiLCJlZGl0YWJlIjp0cnVlLCJoaWRkZW4iOmZhbHNlLCJtdWx0aWxpbmUiOmZhbHNlLCJtYXhMZW5ndGgiOjEyOCwibG92IjoiIiwibG92UHJvdmlkZXIiOiIiLCJvcmRlciI6OTk5OTksInVwbG9hZERpciI6IiIsInRhYmxlIjoiIiwidmFsaWRhdG9yIjoiIiwicmVnZXgiOiIuKiIsInJlZ2V4TGFiZWwiOiIuKiIsIm1pblZhbHVlIjotOTIyMzM3MjAzNjg1NDc3NTgwOCwibWF4VmFsdWUiOjkyMjMzNzIwMzY4NTQ3NzU4MDcsImhpZGVGaWVsZE5hbWUiOiIiLCJoaWRlRmllbGRWYWx1ZSI6IiIsImhpZGVGaWVsZENvbmRpdGlvbiI6IkVRIiwiaHRtbFBvcHVwVGFnIjoiIiwiaHRtbFBvcHVwTGFiZWwiOiIiLCJodG1sUG9wdXBTdHlsZSI6MCwiaHRtbFBvcHVwVGV4dCI6IiIsInZpZXciOiIiLCJ2YWx1ZXMiOltdfV0sIm1vVHlwZU5hbWUiOiJjb20uY2xvdXBpYS5zZXJ2aWNlLmNJTS5pbmZyYW1nci5tZHVpLk1EVUlGaWVsZERlc2NyIiwidmFsaWRhdG9yTmFtZSI6Ik1EVUlGaWVsZExpc3RWYWxpZGF0b3IifX0sIm91dHB1dHMiOnsibGlzdCI6W3sibmFtZSI6IkRyaXZlTGV0dGVyIiwiZGVzY3JpcHRpb24iOiIiLCJ0eXBlIjoiT3JmV2luZG93c0RyaXZlTGV0dGVyIn0seyJuYW1lIjoiRHJpdmVTaXplIiwiZGVzY3JpcHRpb24iOiIiLCJ0eXBlIjoiT3JmRGlza1NpemUifSx7Im5hbWUiOiJEcml2ZVR5cGUiLCJkZXNjcmlwdGlvbiI6IiIsInR5cGUiOiJEaXNrVHlwZSJ9XSwibW9UeXBlTmFtZSI6ImNvbS5jbG91cGlhLnNlcnZpY2UuY0lNLmluZnJhbWdyLm1kdWkuTURVSVdvcmtmbG93VGFza091dHB1dERlc2NyIiwidmFsaWRhdG9yTmFtZSI6Ik1EVUlPdXRwdXRMaXN0VmFsaWRhdG9yIn0sImV4ZWN1dGlvbkxhbmciOiJKYXZhc2NyaXB0IiwiZXhlY3V0aW9uU2NyaXB0IjoiXHQvLyB0aGVyZSBhcmUgc2l4IHByZSAtIGRlZmluZWQgdG9wIGxldmVsIHZhcmlhYmxlcyBpbiBhbnkgQ2xvdXBpYSBTY3JpcHQ6XG5cdC8vIGN0eHQsIGxvZ2dlciwgdXRpbCwgaW5wdXQsIG91dHB1dCwgYW5kIG1ldGFkYXRhXG5cdFxuXHRpbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLm1vZGVsLmNJTSk7XG5cdGltcG9ydFBhY2thZ2UoamF2YS51dGlsKTtcblx0aW1wb3J0UGFja2FnZShqYXZhLmxhbmcpO1xuXHRpbXBvcnRQYWNrYWdlKGphdmEuaW8pO1xuXHRpbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLmxpYi51dGlsKTtcblx0aW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5tb2RlbC5jSU0pO1xuXHRpbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLnNlcnZpY2UuY0lNLmluZnJhbWdyKTtcblx0aW1wb3J0UGFja2FnZShvcmcuYXBhY2hlLmNvbW1vbnMuaHR0cGNsaWVudCk7XG5cdGltcG9ydFBhY2thZ2Uob3JnLmFwYWNoZS5jb21tb25zLmh0dHBjbGllbnQuY29va2llKTtcblx0aW1wb3J0UGFja2FnZShvcmcuYXBhY2hlLmNvbW1vbnMuaHR0cGNsaWVudC5tZXRob2RzKTtcblx0aW1wb3J0UGFja2FnZShvcmcuYXBhY2hlLmNvbW1vbnMuaHR0cGNsaWVudC5hdXRoKTtcblx0aW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5tb2RlbC5jRXZlbnQubm90aWZ5KTtcblx0aW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5saWIudXRpbC5tYWlsKTtcblx0aW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5mdy5vYmpzdG9yZSk7XG5cblx0XG5cdHZhciBpbl9EUklWRURFVEFJTFMgPSBpbnB1dC5Ecml2ZURldGFpbHM7XG5cdFxuXHRpbl9EUklWRURFVEFJTFMgPSBpbl9EUklWRURFVEFJTFMudHJpbSgpO1xuXHRpbl9EUklWRURFVEFJTFMgPSBpbl9EUklWRURFVEFJTFMucmVwbGFjZUFsbChcIlxcXFx9XCIsIFwiXCIpO1xuXHRpbl9EUklWRURFVEFJTFMgPSBpbl9EUklWRURFVEFJTFMucmVwbGFjZUFsbChcIlxcXFx7XCIsIFwiXCIpO1xuXHRcblx0dmFyIGxpc3RvZkVsZW1ldHMgPSBpbl9EUklWRURFVEFJTFMuc3BsaXQoXCI6XCIpO1xuXHR2YXIgb3V0X0RSSVZFTEVUVEVSID0gbGlzdG9mRWxlbWV0c1swXTtcblx0dmFyIG91dF9EUklWRVNJWkUgPSBsaXN0b2ZFbGVtZXRzWzFdO1xuXHR2YXIgb3V0X0RSSVZFVFlQRSA9IGxpc3RvZkVsZW1ldHNbMl07XG5cdFxuXHRvdXRwdXQuRHJpdmVMZXR0ZXIgPSBvdXRfRFJJVkVMRVRURVI7XG5cdG91dHB1dC5Ecml2ZVNpemUgPSBvdXRfRFJJVkVTSVpFO1xuXHRvdXRwdXQuRHJpdmVUeXBlID0gb3V0X0RSSVZFVFlQRTtcblx0XG5cdGxvZ2dlci5hZGRJbmZvKFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXCIpO1xuXHRsb2dnZXIuYWRkSW5mbyhcImluX0RSSVZFREVUQUlMUyA9IFwiICsgaW5fRFJJVkVERVRBSUxTKTtcblx0bG9nZ2VyLmFkZEluZm8oXCJvdXRfRFJJVkVMRVRURVIgPSBcIiArIG91dF9EUklWRUxFVFRFUik7XG5cdGxvZ2dlci5hZGRJbmZvKFwib3V0X0RSSVZFU0laRSA9IFwiICsgb3V0X0RSSVZFU0laRSk7XG5cdGxvZ2dlci5hZGRJbmZvKFwib3V0X0RSSVZFVFlQRSA9IFwiICsgb3V0X0RSSVZFVFlQRSk7XG5cdGxvZ2dlci5hZGRJbmZvKFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXCIpO1xuIiwiY29udHJvbGxlckltcGwiOnsibGlzdCI6W10sIm1vVHlwZU5hbWUiOiJjb20uY2xvdXBpYS5saWIuY01hY3JvVUkuTWFjcm9Db250cm9sbGVyU2NyaXB0IiwidmFsaWRhdG9yTmFtZSI6bnVsbH19"}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"SPRINT-GetVMSummary","taskLabel":"SPRINT-GetVMSummary","isActive":true,"taskSummary":"Gets all the properties of a VM from userAPIGetVMSummary ","taskDescription":"","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 3 inputs\r\n   VM_Id (Label: \'VM_Id\', Type: text, MappableType: gen_text_input)\r\n   Domain (Label: \'Domain\', Type: text, MappableType: gen_text_input)\r\n   UserID (Label: \'UserID\', Type: text, MappableType: gen_text_input)\r\n\r\nTask contains 55 outputs\r\n   Overview_VM_ID (Description: \'The UCS-D VM ID\', Type: gen_text_input)\r\n   Overview_Instance_Name (Description: \'VM Name in UCS-D\', Type: gen_text_input)\r\n   Overview_Status (Description: \'Powered-on Status\', Type: gen_text_input)\r\n   Overview_IP_Address (Description: \'VM IP Address\', Type: gen_text_input)\r\n   Overview_Hostname (Description: \'VM FQDN\', Type: gen_text_input)\r\n   Overview_Image_ID (Description: \'\', Type: gen_text_input)\r\n   Overview_Cloud_Name (Description: \'UCS-D Cloud that the VM belongs to\', Type: gen_text_input)\r\n   Overview_Cloud_Type (Description: \'Type of cloud (VMWare, Hyper-V)\', Type: gen_text_input)\r\n   Ownership_Group (Description: \'UCS-D group that currently owns the VM\', Type: gen_text_input)\r\n   Ownership_vDC (Description: \'Name of the vDC that the VM currently belongs to\', Type: gen_text_input)\r\n   Ownership_Category (Description: \'\', Type: gen_text_input)\r\n   Ownership_Service_Request_ID (Description: \'SR_ID of original creation request\', Type: gen_text_input)\r\n   Ownership_Label (Description: \'\', Type: gen_text_input)\r\n   Ownership_Provisioned_Time (Description: \'Long Date of time when VM was provisioned\', Type: gen_text_input)\r\n   Ownership_Scheduled_Termination_Time (Description: \'Long Date for when VM Expires\', Type: gen_text_input)\r\n   Overview_Host_Node (Description: \'Name of the cluster node that VM resides on\', Type: gen_text_input)\r\n   Network_Port_Group (Description: \'\', Type: gen_text_input)\r\n   Network_VLAN_ID (Description: \'\', Type: gen_text_input)\r\n   Network_No_of_vNics (Description: \'Number of NICS the VM has\', Type: gen_text_input)\r\n   Network_vNic_Mac_Address (Description: \'VM MAC Address\', Type: gen_text_input)\r\n   Network_vNic_Device_Config_Id (Description: \'\', Type: gen_text_input)\r\n   Overview_Boot_Time (Description: \'Long Date fo  last boot time\', Type: gen_text_input)\r\n   Overview_Config_Name (Description: \'\', Type: gen_text_input)\r\n   Overview_VM_Version (Description: \'\', Type: gen_text_input)\r\n   Resources_Resource_Pool (Description: \'\', Type: gen_text_input)\r\n   Resources_Num_Virtual_CPUs (Description: \'\', Type: gen_text_input)\r\n   Resources_CPU_Reserved_MHz (Description: \'\', Type: gen_text_input)\r\n   Resources_CPU_Limit_MHz (Description: \'\', Type: gen_text_input)\r\n   Resources_CPU_Overhead_Limit_MHz (Description: \'\', Type: gen_text_input)\r\n   Resources_CPU_Shares (Description: \'\', Type: gen_text_input)\r\n   Resources_Memory_MB (Description: \'\', Type: gen_text_input)\r\n   Resources_Memory_Reserved_MB (Description: \'\', Type: gen_text_input)\r\n   Resources_Memory_Limit_MB (Description: \'\', Type: gen_text_input)\r\n   Resources_Memory_Overhead_Limit_MB (Description: \'\', Type: gen_text_input)\r\n   Resources_Memory_Shares (Description: \'\', Type: gen_text_input)\r\n   Storage_Total_Provisioned_GB (Description: \'\', Type: gen_text_input)\r\n   Storage_Committed_GB (Description: \'\', Type: gen_text_input)\r\n   Storage_Uncommitted_GB (Description: \'\', Type: gen_text_input)\r\n   Storage_Non_shared_GB (Description: \'\', Type: gen_text_input)\r\n   Storage_Data_Store_Names (Description: \'Hypervisor Datastore where the VM resides\', Type: dataStoreName)\r\n   Storage_VM_Path (Description: \'Path to VM file\', Type: gen_text_input)\r\n   Guest_Information_Guest_OS (Description: \'OS Version (Name)\', Type: gen_text_input)\r\n   Guest_Information_Guest_State (Description: \'State of VM (running, etc)\', Type: gen_text_input)\r\n   Guest_Information_Tools_Status (Description: \'\', Type: gen_text_input)\r\n   Guest_Information_Tools_Version (Description: \'\', Type: gen_text_input)\r\n   Options_Default_PowerOff_Type (Description: \'Default Poweroff Type (soft, hard, etc)\', Type: gen_text_input)\r\n   NIC_Count (Description: \'\', Type: gen_text_input)\r\n   NIC_1 (Description: \'\', Type: gen_text_input)\r\n   NIC_2 (Description: \'\', Type: gen_text_input)\r\n   NIC_3 (Description: \'\', Type: gen_text_input)\r\n   NIC_4 (Description: \'\', Type: gen_text_input)\r\n   NIC_5 (Description: \'\', Type: gen_text_input)\r\n   NIC_6 (Description: \'\', Type: gen_text_input)\r\n   FQDN (Description: \'\', Type: gen_text_input)\r\n   DomainLoginName (Description: \'DomainLoginName\', Type: gen_text_input)\r\n\r\n","taskData":""}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"SPRINT-GetVM","taskLabel":"SPRINT-GetVM","isActive":true,"taskSummary":"VmID in --> VM out","taskDescription":"","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 1 inputs\r\n   vmID (Label: \'vmID\', Type: text, MappableType: gen_text_input)\r\n\r\nTask contains 1 outputs\r\n   VM (Description: \'\', Type: vm)\r\n\r\n","taskData":"eyJuYW1lIjoiU1BSSU5ULUdldFZNIiwibGFiZWwiOiJTUFJJTlQtR2V0Vk0iLCJyZWdpc3RlclVuZGVyVHJlZSI6IlNQUklOVCIsImlzQWN0aXZlIjp0cnVlLCJzdW1tYXJ5IjoiVm1JRCBpbiAtLT4gVk0gb3V0IiwiZGVzY3JpcHRpb24iOiIiLCJ1Y3NkRnJvbVZlcnNpb24iOiI1LjMuMi4wIiwiY29uZmlnIjp7Im5hbWUiOiJJbnB1dENvbmZpZyIsImZpZWxkcyI6eyJsaXN0IjpbeyJuYW1lIjoidm1JRCIsImxhYmVsIjoidm1JRCIsInBlcnNpc3QiOnRydWUsImNvbHVtbkluZm8iOm51bGwsInR5cGUiOiJ0ZXh0IiwibWFwVG9UeXBlIjoiZ2VuX3RleHRfaW5wdXQiLCJtYW5kYXRvcnkiOmZhbHNlLCJyYmlkIjoiIiwic2l6ZSI6Im1lZGl1bSIsImhlbHAiOiIiLCJhbm5vdGF0aW9uIjoiIiwiZ3JvdXAiOiIiLCJ2YWxpZGF0ZSI6ZmFsc2UsImZvcm1NYW5hZ2VkVGFibGUiOmZhbHNlLCJhZGRFbnRyeUZvcm0iOiIiLCJlZGl0RW50cnlGb3JtIjoiIiwiZGVsZXRlRW50cnlGb3JtIjoiIiwibW92ZVVwRm9ybSI6IiIsIm1vdmVEb3duRm9ybSI6IiIsImluZm9FbnRyeUZvcm0iOiIiLCJydW5BY3Rpb25Gb3JtIjoiIiwiZWRpdGFiZSI6dHJ1ZSwiaGlkZGVuIjpmYWxzZSwibXVsdGlsaW5lIjpmYWxzZSwibWF4TGVuZ3RoIjoxMjgsImxvdiI6IiIsImxvdlByb3ZpZGVyIjoiIiwib3JkZXIiOjk5OTk5LCJ1cGxvYWREaXIiOiIiLCJ0YWJsZSI6IiIsInZhbGlkYXRvciI6IiIsInJlZ2V4IjoiLioiLCJyZWdleExhYmVsIjoiLioiLCJtaW5WYWx1ZSI6LTkyMjMzNzIwMzY4NTQ3NzU4MDgsIm1heFZhbHVlIjo5MjIzMzcyMDM2ODU0Nzc1ODA3LCJoaWRlRmllbGROYW1lIjoiIiwiaGlkZUZpZWxkVmFsdWUiOiIiLCJoaWRlRmllbGRDb25kaXRpb24iOiJFUSIsImh0bWxQb3B1cFRhZyI6IiIsImh0bWxQb3B1cExhYmVsIjoiIiwiaHRtbFBvcHVwU3R5bGUiOjAsImh0bWxQb3B1cFRleHQiOiIiLCJ2aWV3IjoiIiwidmFsdWVzIjpbXX1dLCJtb1R5cGVOYW1lIjoiY29tLmNsb3VwaWEuc2VydmljZS5jSU0uaW5mcmFtZ3IubWR1aS5NRFVJRmllbGREZXNjciIsInZhbGlkYXRvck5hbWUiOiJNRFVJRmllbGRMaXN0VmFsaWRhdG9yIn19LCJvdXRwdXRzIjp7Imxpc3QiOlt7Im5hbWUiOiJWTSIsImRlc2NyaXB0aW9uIjoiIiwidHlwZSI6InZtIn1dLCJtb1R5cGVOYW1lIjoiY29tLmNsb3VwaWEuc2VydmljZS5jSU0uaW5mcmFtZ3IubWR1aS5NRFVJV29ya2Zsb3dUYXNrT3V0cHV0RGVzY3IiLCJ2YWxpZGF0b3JOYW1lIjoiTURVSU91dHB1dExpc3RWYWxpZGF0b3IifSwiZXhlY3V0aW9uTGFuZyI6IkphdmFzY3JpcHQiLCJleGVjdXRpb25TY3JpcHQiOiJpbXBvcnRQYWNrYWdlKGphdmEudXRpbCk7XG5pbXBvcnRQYWNrYWdlKGphdmEubGFuZyk7XG5pbXBvcnRQYWNrYWdlKGphdmEuaW8pO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5tb2RlbC5jRXZlbnQubm90aWZ5KTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubW9kZWwuY0lNKTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubGliLnV0aWwubWFpbCk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLmZ3Lm9ianN0b3JlKTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubGliLnV0aWwubWFuYWdlZHJlcG9ydHMpO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5zZXJ2aWNlLmNJTS5pbmZyYW1ncik7XG5cblxuXG5cbm91dHB1dC5WTSA9IGlucHV0LnZtSUQ7IFxuXG4iLCJjb250cm9sbGVySW1wbCI6eyJsaXN0IjpbXSwibW9UeXBlTmFtZSI6ImNvbS5jbG91cGlhLmxpYi5jTWFjcm9VSS5NYWNyb0NvbnRyb2xsZXJTY3JpcHQiLCJ2YWxpZGF0b3JOYW1lIjpudWxsfX0="}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"SPRINT-ProvisionVMwithIP-Invoke","taskLabel":"SPRINT-ProvisionVMwithIP-Invoke","isActive":true,"taskSummary":"","taskDescription":"","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 12 inputs\r\n   Catalog (Label: \'Catalog\', Type: text, MappableType: gen_text_input)\r\n   UserName (Label: \'UserName\', Type: text, MappableType: gen_text_input)\r\n   Password (Label: \'Password\', Type: text, MappableType: gen_text_input)\r\n   PostProvisioningWorkflow (Label: \'PostProvisioningWorkflow\', Type: text, MappableType: gen_text_input)\r\n   VDC (Label: \'VDC\', Type: text, MappableType: gen_text_input)\r\n   VMPrefix (Label: \'VMPrefix\', Type: text, MappableType: gen_text_input)\r\n   CPUCores (Label: \'CPUCores\', Type: text, MappableType: gen_text_input)\r\n   Memory (Label: \'Memory\', Type: text, MappableType: gen_text_input)\r\n   DiskSize (Label: \'DiskSize\', Type: text, MappableType: gen_text_input)\r\n   IPAddress (Label: \'IPAddress\', Type: text, MappableType: gen_text_input)\r\n   Subnet (Label: \'Subnet\', Type: text, MappableType: gen_text_input)\r\n   Gateway (Label: \'Gateway\', Type: text, MappableType: gen_text_input)\r\n\r\nTask contains 1 outputs\r\n   VMID (Description: \'\', Type: vm)\r\n\r\n","taskData":""}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"SPRINT-ProvisionVM-InputProcessor","taskLabel":"SPRINT-ProvisionVM-InputProcessor","isActive":true,"taskSummary":"","taskDescription":"","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 23 inputs\r\n   DriveSize_D (Label: \'DriveSize_D\', Type: text, MappableType: gen_text_input)\r\n   DriveSize_E (Label: \'DriveSize_E\', Type: text, MappableType: gen_text_input)\r\n   DriveSize_G (Label: \'DriveSize_G\', Type: text, MappableType: gen_text_input)\r\n   sw_EPO (Label: \'sw_EPO\', Type: text, MappableType: gen_text_input)\r\n   sw_WinSCP (Label: \'sw_WinSCP\', Type: text, MappableType: gen_text_input)\r\n   sw_SymantecNetbackup (Label: \'sw_SymantecNetbackup\', Type: text, MappableType: gen_text_input)\r\n   sw_ReliatelWinAgent (Label: \'sw_ReliatelWinAgent\', Type: text, MappableType: gen_text_input)\r\n   sw_DisableTCPChimneyOffload (Label: \'sw_DisableTCPChimneyOffload\', Type: text, MappableType: gen_text_input)\r\n   sw_MBSA (Label: \'sw_MBSA\', Type: text, MappableType: gen_text_input)\r\n   sw_Encase (Label: \'sw_Encase\', Type: text, MappableType: gen_text_input)\r\n   sw_SNMP (Label: \'sw_SNMP\', Type: text, MappableType: gen_text_input)\r\n   sw_Default (Label: \'sw_Default\', Type: text, MappableType: gen_text_input)\r\n   public_IP (Label: \'public_IP\', Type: text, MappableType: gen_text_input)\r\n   public_Subnet (Label: \'public_Subnet\', Type: text, MappableType: gen_text_input)\r\n   public_Gateway (Label: \'public_Gateway\', Type: text, MappableType: gen_text_input)\r\n   backup_IP (Label: \'backup_IP\', Type: text, MappableType: gen_text_input)\r\n   backup_Subnet (Label: \'backup_Subnet\', Type: text, MappableType: gen_text_input)\r\n   backup_Gateway (Label: \'backup_Gateway\', Type: text, MappableType: gen_text_input)\r\n   private_IP (Label: \'private_IP\', Type: text, MappableType: gen_text_input)\r\n   private_Subnet (Label: \'private_Subnet\', Type: text, MappableType: gen_text_input)\r\n   private_Gateway (Label: \'private_Gateway\', Type: text, MappableType: gen_text_input)\r\n   isNIC_Private (Label: \'isNIC_Private\', Type: text, MappableType: gen_text_input)\r\n   isNIC_Backup (Label: \'isNIC_Backup\', Type: text, MappableType: gen_text_input)\r\n\r\nTask contains 9 outputs\r\n   SOFTWARELIST (Description: \'\', Type: gen_text_input)\r\n   SOFTWARELISTSIZE (Description: \'\', Type: gen_text_input)\r\n   DRIVELIST (Description: \'\', Type: gen_text_input)\r\n   DRIVELISTSIZE (Description: \'\', Type: gen_text_input)\r\n   NICLIST (Description: \'\', Type: gen_text_input)\r\n   NICLISTSIZE (Description: \'\', Type: gen_text_input)\r\n   IP_Public (Description: \'\', Type: gen_text_input)\r\n   IP_Backup (Description: \'\', Type: gen_text_input)\r\n   IP_Private (Description: \'\', Type: gen_text_input)\r\n\r\n","taskData":""}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"SPRINT-ProvisionVM-PostProv-ForLoopNICs","taskLabel":"SPRINT-ProvisionVM-PostProv-ForLoopNICs","isActive":true,"taskSummary":"","taskDescription":"","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 3 inputs\r\n   NICDetails (Label: \'NICDetails\', Type: text, MappableType: gen_text_input)\r\n   PrivatePortGroup (Label: \'PrivatePortGroup\', Type: text, MappableType: gen_text_input)\r\n   BackupPortGroup (Label: \'BackupPortGroup\', Type: text, MappableType: gen_text_input)\r\n\r\nTask contains 5 outputs\r\n   NICName (Description: \'\', Type: gen_text_input)\r\n   IP (Description: \'\', Type: gen_text_input)\r\n   Subnet (Description: \'\', Type: subnetMask)\r\n   Gateway (Description: \'\', Type: gen_text_input)\r\n   PortGroup (Description: \'\', Type: vmwareVmPortGroupIdentity)\r\n\r\n","taskData":"eyJuYW1lIjoiU1BSSU5ULVByb3Zpc2lvblZNLVBvc3RQcm92LUZvckxvb3BOSUNzIiwibGFiZWwiOiJTUFJJTlQtUHJvdmlzaW9uVk0tUG9zdFByb3YtRm9yTG9vcE5JQ3MiLCJyZWdpc3RlclVuZGVyVHJlZSI6IlNQUklOVCIsImlzQWN0aXZlIjp0cnVlLCJzdW1tYXJ5IjoiIiwiZGVzY3JpcHRpb24iOiIiLCJ1Y3NkRnJvbVZlcnNpb24iOiI1LjMuMi4wIiwiY29uZmlnIjp7Im5hbWUiOiJJbnB1dENvbmZpZyIsImZpZWxkcyI6eyJsaXN0IjpbeyJuYW1lIjoiTklDRGV0YWlscyIsImxhYmVsIjoiTklDRGV0YWlscyIsInBlcnNpc3QiOnRydWUsImNvbHVtbkluZm8iOm51bGwsInR5cGUiOiJ0ZXh0IiwibWFwVG9UeXBlIjoiZ2VuX3RleHRfaW5wdXQiLCJtYW5kYXRvcnkiOmZhbHNlLCJyYmlkIjoiIiwic2l6ZSI6Im1lZGl1bSIsImhlbHAiOiIiLCJhbm5vdGF0aW9uIjoiIiwiZ3JvdXAiOiIiLCJ2YWxpZGF0ZSI6ZmFsc2UsImZvcm1NYW5hZ2VkVGFibGUiOmZhbHNlLCJhZGRFbnRyeUZvcm0iOiIiLCJlZGl0RW50cnlGb3JtIjoiIiwiZGVsZXRlRW50cnlGb3JtIjoiIiwibW92ZVVwRm9ybSI6IiIsIm1vdmVEb3duRm9ybSI6IiIsImluZm9FbnRyeUZvcm0iOiIiLCJydW5BY3Rpb25Gb3JtIjoiIiwiZWRpdGFiZSI6dHJ1ZSwiaGlkZGVuIjpmYWxzZSwibXVsdGlsaW5lIjpmYWxzZSwibWF4TGVuZ3RoIjoxMjgsImxvdiI6IiIsImxvdlByb3ZpZGVyIjoiIiwib3JkZXIiOjk5OTk5LCJ1cGxvYWREaXIiOiIiLCJ0YWJsZSI6IiIsInZhbGlkYXRvciI6IiIsInJlZ2V4IjoiLioiLCJyZWdleExhYmVsIjoiLioiLCJtaW5WYWx1ZSI6LTkyMjMzNzIwMzY4NTQ3NzU4MDgsIm1heFZhbHVlIjo5MjIzMzcyMDM2ODU0Nzc1ODA3LCJoaWRlRmllbGROYW1lIjoiIiwiaGlkZUZpZWxkVmFsdWUiOiIiLCJoaWRlRmllbGRDb25kaXRpb24iOiJFUSIsImh0bWxQb3B1cFRhZyI6IiIsImh0bWxQb3B1cExhYmVsIjoiIiwiaHRtbFBvcHVwU3R5bGUiOjAsImh0bWxQb3B1cFRleHQiOiIiLCJ2aWV3IjoiIiwidmFsdWVzIjpbXX0seyJuYW1lIjoiUHJpdmF0ZVBvcnRHcm91cCIsImxhYmVsIjoiUHJpdmF0ZVBvcnRHcm91cCIsInBlcnNpc3QiOnRydWUsImNvbHVtbkluZm8iOm51bGwsInR5cGUiOiJ0ZXh0IiwibWFwVG9UeXBlIjoiZ2VuX3RleHRfaW5wdXQiLCJtYW5kYXRvcnkiOmZhbHNlLCJyYmlkIjoiIiwic2l6ZSI6Im1lZGl1bSIsImhlbHAiOiIiLCJhbm5vdGF0aW9uIjoiIiwiZ3JvdXAiOiIiLCJ2YWxpZGF0ZSI6ZmFsc2UsImZvcm1NYW5hZ2VkVGFibGUiOmZhbHNlLCJhZGRFbnRyeUZvcm0iOiIiLCJlZGl0RW50cnlGb3JtIjoiIiwiZGVsZXRlRW50cnlGb3JtIjoiIiwibW92ZVVwRm9ybSI6IiIsIm1vdmVEb3duRm9ybSI6IiIsImluZm9FbnRyeUZvcm0iOiIiLCJydW5BY3Rpb25Gb3JtIjoiIiwiZWRpdGFiZSI6dHJ1ZSwiaGlkZGVuIjpmYWxzZSwibXVsdGlsaW5lIjpmYWxzZSwibWF4TGVuZ3RoIjoxMjgsImxvdiI6IiIsImxvdlByb3ZpZGVyIjoiIiwib3JkZXIiOjk5OTk5LCJ1cGxvYWREaXIiOiIiLCJ0YWJsZSI6IiIsInZhbGlkYXRvciI6IiIsInJlZ2V4IjoiLioiLCJyZWdleExhYmVsIjoiLioiLCJtaW5WYWx1ZSI6LTkyMjMzNzIwMzY4NTQ3NzU4MDgsIm1heFZhbHVlIjo5MjIzMzcyMDM2ODU0Nzc1ODA3LCJoaWRlRmllbGROYW1lIjoiIiwiaGlkZUZpZWxkVmFsdWUiOiIiLCJoaWRlRmllbGRDb25kaXRpb24iOiJFUSIsImh0bWxQb3B1cFRhZyI6IiIsImh0bWxQb3B1cExhYmVsIjoiIiwiaHRtbFBvcHVwU3R5bGUiOjAsImh0bWxQb3B1cFRleHQiOiIiLCJ2aWV3IjoiIiwidmFsdWVzIjpbXX0seyJuYW1lIjoiQmFja3VwUG9ydEdyb3VwIiwibGFiZWwiOiJCYWNrdXBQb3J0R3JvdXAiLCJwZXJzaXN0Ijp0cnVlLCJjb2x1bW5JbmZvIjpudWxsLCJ0eXBlIjoidGV4dCIsIm1hcFRvVHlwZSI6Imdlbl90ZXh0X2lucHV0IiwibWFuZGF0b3J5IjpmYWxzZSwicmJpZCI6IiIsInNpemUiOiJtZWRpdW0iLCJoZWxwIjoiIiwiYW5ub3RhdGlvbiI6IiIsImdyb3VwIjoiIiwidmFsaWRhdGUiOmZhbHNlLCJmb3JtTWFuYWdlZFRhYmxlIjpmYWxzZSwiYWRkRW50cnlGb3JtIjoiIiwiZWRpdEVudHJ5Rm9ybSI6IiIsImRlbGV0ZUVudHJ5Rm9ybSI6IiIsIm1vdmVVcEZvcm0iOiIiLCJtb3ZlRG93bkZvcm0iOiIiLCJpbmZvRW50cnlGb3JtIjoiIiwicnVuQWN0aW9uRm9ybSI6IiIsImVkaXRhYmUiOnRydWUsImhpZGRlbiI6ZmFsc2UsIm11bHRpbGluZSI6ZmFsc2UsIm1heExlbmd0aCI6MTI4LCJsb3YiOiIiLCJsb3ZQcm92aWRlciI6IiIsIm9yZGVyIjo5OTk5OSwidXBsb2FkRGlyIjoiIiwidGFibGUiOiIiLCJ2YWxpZGF0b3IiOiIiLCJyZWdleCI6Ii4qIiwicmVnZXhMYWJlbCI6Ii4qIiwibWluVmFsdWUiOi05MjIzMzcyMDM2ODU0Nzc1ODA4LCJtYXhWYWx1ZSI6OTIyMzM3MjAzNjg1NDc3NTgwNywiaGlkZUZpZWxkTmFtZSI6IiIsImhpZGVGaWVsZFZhbHVlIjoiIiwiaGlkZUZpZWxkQ29uZGl0aW9uIjoiRVEiLCJodG1sUG9wdXBUYWciOiIiLCJodG1sUG9wdXBMYWJlbCI6IiIsImh0bWxQb3B1cFN0eWxlIjowLCJodG1sUG9wdXBUZXh0IjoiIiwidmlldyI6IiIsInZhbHVlcyI6W119XSwibW9UeXBlTmFtZSI6ImNvbS5jbG91cGlhLnNlcnZpY2UuY0lNLmluZnJhbWdyLm1kdWkuTURVSUZpZWxkRGVzY3IiLCJ2YWxpZGF0b3JOYW1lIjoiTURVSUZpZWxkTGlzdFZhbGlkYXRvciJ9fSwib3V0cHV0cyI6eyJsaXN0IjpbeyJuYW1lIjoiTklDTmFtZSIsImRlc2NyaXB0aW9uIjoiIiwidHlwZSI6Imdlbl90ZXh0X2lucHV0In0seyJuYW1lIjoiSVAiLCJkZXNjcmlwdGlvbiI6IiIsInR5cGUiOiJnZW5fdGV4dF9pbnB1dCJ9LHsibmFtZSI6IlN1Ym5ldCIsImRlc2NyaXB0aW9uIjoiIiwidHlwZSI6InN1Ym5ldE1hc2sifSx7Im5hbWUiOiJHYXRld2F5IiwiZGVzY3JpcHRpb24iOiIiLCJ0eXBlIjoiZ2VuX3RleHRfaW5wdXQifSx7Im5hbWUiOiJQb3J0R3JvdXAiLCJkZXNjcmlwdGlvbiI6IiIsInR5cGUiOiJ2bXdhcmVWbVBvcnRHcm91cElkZW50aXR5In1dLCJtb1R5cGVOYW1lIjoiY29tLmNsb3VwaWEuc2VydmljZS5jSU0uaW5mcmFtZ3IubWR1aS5NRFVJV29ya2Zsb3dUYXNrT3V0cHV0RGVzY3IiLCJ2YWxpZGF0b3JOYW1lIjoiTURVSU91dHB1dExpc3RWYWxpZGF0b3IifSwiZXhlY3V0aW9uTGFuZyI6IkphdmFzY3JpcHQiLCJleGVjdXRpb25TY3JpcHQiOiIvLyB0aGVyZSBhcmUgc2l4IHByZSAtIGRlZmluZWQgdG9wIGxldmVsIHZhcmlhYmxlcyBpbiBhbnkgQ2xvdXBpYSBTY3JpcHQ6XG4vLyBjdHh0LCBsb2dnZXIsIHV0aWwsIGlucHV0LCBvdXRwdXQsIGFuZCBtZXRhZGF0YVxuXG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLm1vZGVsLmNJTSk7XG5pbXBvcnRQYWNrYWdlKGphdmEudXRpbCk7XG5pbXBvcnRQYWNrYWdlKGphdmEubGFuZyk7XG5pbXBvcnRQYWNrYWdlKGphdmEuaW8pO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5saWIudXRpbCk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLm1vZGVsLmNJTSk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLnNlcnZpY2UuY0lNLmluZnJhbWdyKTtcbmltcG9ydFBhY2thZ2Uob3JnLmFwYWNoZS5jb21tb25zLmh0dHBjbGllbnQpO1xuaW1wb3J0UGFja2FnZShvcmcuYXBhY2hlLmNvbW1vbnMuaHR0cGNsaWVudC5jb29raWUpO1xuaW1wb3J0UGFja2FnZShvcmcuYXBhY2hlLmNvbW1vbnMuaHR0cGNsaWVudC5tZXRob2RzKTtcbmltcG9ydFBhY2thZ2Uob3JnLmFwYWNoZS5jb21tb25zLmh0dHBjbGllbnQuYXV0aCk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLm1vZGVsLmNFdmVudC5ub3RpZnkpO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5saWIudXRpbC5tYWlsKTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEuZncub2Jqc3RvcmUpO1xuXG52YXIgaW5fTklDREVUQUlMUyA9IGlucHV0Lk5JQ0RldGFpbHM7XG52YXIgaW5fUHJpdmF0ZVBvcnRHcm91cCA9IGlucHV0LlByaXZhdGVQb3J0R3JvdXA7XG52YXIgaW5fQmFja3VwUG9ydEdyb3VwID0gaW5wdXQuQmFja3VwUG9ydEdyb3VwO1xuXG5pbl9OSUNERVRBSUxTID0gaW5fTklDREVUQUlMUy50cmltKCk7XG5pbl9OSUNERVRBSUxTID0gaW5fTklDREVUQUlMUy5yZXBsYWNlQWxsKFwiXFxcXH1cIiwgXCJcIik7XG5pbl9OSUNERVRBSUxTID0gaW5fTklDREVUQUlMUy5yZXBsYWNlQWxsKFwiXFxcXHtcIiwgXCJcIik7XG5cbnZhciBsaXN0b2ZFbGVtZXRzID0gaW5fTklDREVUQUlMUy5zcGxpdChcIjpcIik7XG52YXIgb3V0X05BTUUgPSBsaXN0b2ZFbGVtZXRzWzBdO1xudmFyIG91dF9JUCA9IGxpc3RvZkVsZW1ldHNbMV07XG52YXIgb3V0X1NVQk5FVCA9IGxpc3RvZkVsZW1ldHNbMl07XG52YXIgb3V0X0dBVEVXQVkgPSBsaXN0b2ZFbGVtZXRzWzNdO1xudmFyIG91dF9QT1JUR1JPVVAgPSBcIlwiO1xuaWYgKG91dF9OQU1FID09IFwiUHJpdmF0ZVwiKSB7XG5cdG91dF9QT1JUR1JPVVAgPSBpbl9Qcml2YXRlUG9ydEdyb3VwO1xufSBlbHNlIGlmIChvdXRfTkFNRSA9PSBcIkJhY2t1cFwiKSB7XG5cdG91dF9QT1JUR1JPVVAgPSBpbl9CYWNrdXBQb3J0R3JvdXA7XG59XG5cbm91dHB1dC5OSUNOYW1lID0gb3V0X05BTUU7XG5vdXRwdXQuSVAgPSBvdXRfSVA7XG5vdXRwdXQuU3VibmV0ID0gb3V0X1NVQk5FVDtcbm91dHB1dC5HYXRld2F5ID0gb3V0X0dBVEVXQVk7XG5vdXRwdXQuUG9ydEdyb3VwID0gb3V0X1BPUlRHUk9VUDtcblxubG9nZ2VyLmFkZEluZm8oXCItLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cIik7XG5sb2dnZXIuYWRkSW5mbyhcImluX05JQ0RFVEFJTFMgPSBcIiArIGluX05JQ0RFVEFJTFMpO1xubG9nZ2VyLmFkZEluZm8oXCJpbl9Qcml2YXRlUG9ydEdyb3VwID0gXCIgKyBpbl9Qcml2YXRlUG9ydEdyb3VwKTtcbmxvZ2dlci5hZGRJbmZvKFwiaW5fQmFja3VwUG9ydEdyb3VwID0gXCIgKyBpbl9CYWNrdXBQb3J0R3JvdXApO1xubG9nZ2VyLmFkZEluZm8oXCJvdXRfTkFNRSA9IFwiICsgb3V0X05BTUUpO1xubG9nZ2VyLmFkZEluZm8oXCJvdXRfSVAgPSBcIiArIG91dF9JUCk7XG5sb2dnZXIuYWRkSW5mbyhcIm91dF9TVUJORVQgPSBcIiArIG91dF9TVUJORVQpO1xubG9nZ2VyLmFkZEluZm8oXCJvdXRfR0FURVdBWSA9IFwiICsgb3V0X0dBVEVXQVkpO1xubG9nZ2VyLmFkZEluZm8oXCJvdXRfUE9SVEdST1VQID0gXCIgKyBvdXRfUE9SVEdST1VQKTtcbmxvZ2dlci5hZGRJbmZvKFwiLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXCIpO1xuIiwiY29udHJvbGxlckltcGwiOnsibGlzdCI6W10sIm1vVHlwZU5hbWUiOiJjb20uY2xvdXBpYS5saWIuY01hY3JvVUkuTWFjcm9Db250cm9sbGVyU2NyaXB0IiwidmFsaWRhdG9yTmFtZSI6bnVsbH19"}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"SPRINT-Postprov-Info","taskLabel":"SPRINT-Postprov-Info","isActive":true,"taskSummary":"","taskDescription":"","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 23 inputs\r\n   VMwareAccount (Label: \'VMwareAccount\', Type: text, MappableType: vmwareAccountName)\r\n   UserID (Label: \'UserID\', Type: text, MappableType: gen_text_input)\r\n   Password (Label: \'Password\', Type: text, MappableType: password)\r\n   Domain (Label: \'Domain\', Type: text, MappableType: gen_text_input)\r\n   VMType (Label: \'VMType\', Type: text, MappableType: gen_text_input)\r\n   SoftwareList (Label: \'SoftwareList\', Type: text, MappableType: gen_text_input)\r\n   SoftwareListSize (Label: \'SoftwareListSize\', Type: text, MappableType: gen_text_input)\r\n   DriveList (Label: \'DriveList\', Type: text, MappableType: gen_text_input)\r\n   DriveListSize (Label: \'DriveListSize\', Type: text, MappableType: gen_text_input)\r\n   NICList (Label: \'NICList\', Type: text, MappableType: gen_text_input)\r\n   NICListSize (Label: \'NICListSize\', Type: text, MappableType: gen_text_input)\r\n   PSA (Label: \'PSA\', Type: text, MappableType: gen_text_input)\r\n   FileServer (Label: \'FileServer\', Type: text, MappableType: gen_text_input)\r\n   FileServerUserName (Label: \'FileServerUserName\', Type: text, MappableType: gen_text_input)\r\n   FileServerPassword (Label: \'FileServerPassword\', Type: text, MappableType: password)\r\n   VMwareGenericPortGroupIdentity (Label: \'VMwareGenericPortGroupIdentity\', Type: text, MappableType: vmwareVmPortGroupIdentity)\r\n   AdapterType (Label: \'AdapterType\', Type: text, MappableType: NetworkAdapterType)\r\n   VMID (Label: \'VMID\', Type: text, MappableType: gen_text_input)\r\n   IP_Public (Label: \'IP_Public\', Type: text, MappableType: gen_text_input)\r\n   IP_Backup (Label: \'IP_Backup\', Type: text, MappableType: gen_text_input)\r\n   IP_Private (Label: \'IP_Private\', Type: text, MappableType: gen_text_input)\r\n   PrivatePortGroup (Label: \'PrivatePortGroup\', Type: text, MappableType: vmwareVmPortGroupIdentity)\r\n   BackupPortGroup (Label: \'BackupPortGroup\', Type: text, MappableType: vmwareVmPortGroupIdentity)\r\n\r\nTask contains 0 outputs\r\n\r\n","taskData":""}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"SPRINT-ArrayLengthProcessor","taskLabel":"SPRINT-ArrayLengthProcessor","isActive":true,"taskSummary":"","taskDescription":"","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 3 inputs\r\n   SoftwareListSize (Label: \'SoftwareListSize\', Type: text, MappableType: gen_text_input)\r\n   DriveListSize (Label: \'DriveListSize\', Type: text, MappableType: gen_text_input)\r\n   NICListSize (Label: \'NICListSize\', Type: text, MappableType: gen_text_input)\r\n\r\nTask contains 3 outputs\r\n   SOFTWARELISTSIZE (Description: \'\', Type: gen_text_input)\r\n   DRIVELISTSIZE (Description: \'\', Type: gen_text_input)\r\n   NICLISTSIZE (Description: \'\', Type: gen_text_input)\r\n\r\n","taskData":"eyJuYW1lIjoiU1BSSU5ULUFycmF5TGVuZ3RoUHJvY2Vzc29yIiwibGFiZWwiOiJTUFJJTlQtQXJyYXlMZW5ndGhQcm9jZXNzb3IiLCJyZWdpc3RlclVuZGVyVHJlZSI6IlNQUklOVCIsImlzQWN0aXZlIjp0cnVlLCJzdW1tYXJ5IjoiIiwiZGVzY3JpcHRpb24iOiIiLCJ1Y3NkRnJvbVZlcnNpb24iOiI1LjMuMi4wIiwiY29uZmlnIjp7Im5hbWUiOiJJbnB1dENvbmZpZyIsImZpZWxkcyI6eyJsaXN0IjpbeyJuYW1lIjoiU29mdHdhcmVMaXN0U2l6ZSIsImxhYmVsIjoiU29mdHdhcmVMaXN0U2l6ZSIsInBlcnNpc3QiOnRydWUsImNvbHVtbkluZm8iOm51bGwsInR5cGUiOiJ0ZXh0IiwibWFwVG9UeXBlIjoiZ2VuX3RleHRfaW5wdXQiLCJtYW5kYXRvcnkiOmZhbHNlLCJyYmlkIjoiIiwic2l6ZSI6Im1lZGl1bSIsImhlbHAiOiIiLCJhbm5vdGF0aW9uIjoiIiwiZ3JvdXAiOiIiLCJ2YWxpZGF0ZSI6ZmFsc2UsImZvcm1NYW5hZ2VkVGFibGUiOmZhbHNlLCJhZGRFbnRyeUZvcm0iOiIiLCJlZGl0RW50cnlGb3JtIjoiIiwiZGVsZXRlRW50cnlGb3JtIjoiIiwibW92ZVVwRm9ybSI6IiIsIm1vdmVEb3duRm9ybSI6IiIsImluZm9FbnRyeUZvcm0iOiIiLCJydW5BY3Rpb25Gb3JtIjoiIiwiZWRpdGFiZSI6dHJ1ZSwiaGlkZGVuIjpmYWxzZSwibXVsdGlsaW5lIjpmYWxzZSwibWF4TGVuZ3RoIjoxMjgsImxvdiI6IiIsImxvdlByb3ZpZGVyIjoiIiwib3JkZXIiOjk5OTk5LCJ1cGxvYWREaXIiOiIiLCJ0YWJsZSI6IiIsInZhbGlkYXRvciI6IiIsInJlZ2V4IjoiLioiLCJyZWdleExhYmVsIjoiLioiLCJtaW5WYWx1ZSI6LTkyMjMzNzIwMzY4NTQ3NzU4MDgsIm1heFZhbHVlIjo5MjIzMzcyMDM2ODU0Nzc1ODA3LCJoaWRlRmllbGROYW1lIjoiIiwiaGlkZUZpZWxkVmFsdWUiOiIiLCJoaWRlRmllbGRDb25kaXRpb24iOiJFUSIsImh0bWxQb3B1cFRhZyI6IiIsImh0bWxQb3B1cExhYmVsIjoiIiwiaHRtbFBvcHVwU3R5bGUiOjAsImh0bWxQb3B1cFRleHQiOiIiLCJ2aWV3IjoiIiwidmFsdWVzIjpbXX0seyJuYW1lIjoiRHJpdmVMaXN0U2l6ZSIsImxhYmVsIjoiRHJpdmVMaXN0U2l6ZSIsInBlcnNpc3QiOnRydWUsImNvbHVtbkluZm8iOm51bGwsInR5cGUiOiJ0ZXh0IiwibWFwVG9UeXBlIjoiZ2VuX3RleHRfaW5wdXQiLCJtYW5kYXRvcnkiOmZhbHNlLCJyYmlkIjoiIiwic2l6ZSI6Im1lZGl1bSIsImhlbHAiOiIiLCJhbm5vdGF0aW9uIjoiIiwiZ3JvdXAiOiIiLCJ2YWxpZGF0ZSI6ZmFsc2UsImZvcm1NYW5hZ2VkVGFibGUiOmZhbHNlLCJhZGRFbnRyeUZvcm0iOiIiLCJlZGl0RW50cnlGb3JtIjoiIiwiZGVsZXRlRW50cnlGb3JtIjoiIiwibW92ZVVwRm9ybSI6IiIsIm1vdmVEb3duRm9ybSI6IiIsImluZm9FbnRyeUZvcm0iOiIiLCJydW5BY3Rpb25Gb3JtIjoiIiwiZWRpdGFiZSI6dHJ1ZSwiaGlkZGVuIjpmYWxzZSwibXVsdGlsaW5lIjpmYWxzZSwibWF4TGVuZ3RoIjoxMjgsImxvdiI6IiIsImxvdlByb3ZpZGVyIjoiIiwib3JkZXIiOjk5OTk5LCJ1cGxvYWREaXIiOiIiLCJ0YWJsZSI6IiIsInZhbGlkYXRvciI6IiIsInJlZ2V4IjoiLioiLCJyZWdleExhYmVsIjoiLioiLCJtaW5WYWx1ZSI6LTkyMjMzNzIwMzY4NTQ3NzU4MDgsIm1heFZhbHVlIjo5MjIzMzcyMDM2ODU0Nzc1ODA3LCJoaWRlRmllbGROYW1lIjoiIiwiaGlkZUZpZWxkVmFsdWUiOiIiLCJoaWRlRmllbGRDb25kaXRpb24iOiJFUSIsImh0bWxQb3B1cFRhZyI6IiIsImh0bWxQb3B1cExhYmVsIjoiIiwiaHRtbFBvcHVwU3R5bGUiOjAsImh0bWxQb3B1cFRleHQiOiIiLCJ2aWV3IjoiIiwidmFsdWVzIjpbXX0seyJuYW1lIjoiTklDTGlzdFNpemUiLCJsYWJlbCI6Ik5JQ0xpc3RTaXplIiwicGVyc2lzdCI6dHJ1ZSwiY29sdW1uSW5mbyI6bnVsbCwidHlwZSI6InRleHQiLCJtYXBUb1R5cGUiOiJnZW5fdGV4dF9pbnB1dCIsIm1hbmRhdG9yeSI6ZmFsc2UsInJiaWQiOiIiLCJzaXplIjoibWVkaXVtIiwiaGVscCI6IiIsImFubm90YXRpb24iOiIiLCJncm91cCI6IiIsInZhbGlkYXRlIjpmYWxzZSwiZm9ybU1hbmFnZWRUYWJsZSI6ZmFsc2UsImFkZEVudHJ5Rm9ybSI6IiIsImVkaXRFbnRyeUZvcm0iOiIiLCJkZWxldGVFbnRyeUZvcm0iOiIiLCJtb3ZlVXBGb3JtIjoiIiwibW92ZURvd25Gb3JtIjoiIiwiaW5mb0VudHJ5Rm9ybSI6IiIsInJ1bkFjdGlvbkZvcm0iOiIiLCJlZGl0YWJlIjp0cnVlLCJoaWRkZW4iOmZhbHNlLCJtdWx0aWxpbmUiOmZhbHNlLCJtYXhMZW5ndGgiOjEyOCwibG92IjoiIiwibG92UHJvdmlkZXIiOiIiLCJvcmRlciI6OTk5OTksInVwbG9hZERpciI6IiIsInRhYmxlIjoiIiwidmFsaWRhdG9yIjoiIiwicmVnZXgiOiIuKiIsInJlZ2V4TGFiZWwiOiIuKiIsIm1pblZhbHVlIjotOTIyMzM3MjAzNjg1NDc3NTgwOCwibWF4VmFsdWUiOjkyMjMzNzIwMzY4NTQ3NzU4MDcsImhpZGVGaWVsZE5hbWUiOiIiLCJoaWRlRmllbGRWYWx1ZSI6IiIsImhpZGVGaWVsZENvbmRpdGlvbiI6IkVRIiwiaHRtbFBvcHVwVGFnIjoiIiwiaHRtbFBvcHVwTGFiZWwiOiIiLCJodG1sUG9wdXBTdHlsZSI6MCwiaHRtbFBvcHVwVGV4dCI6IiIsInZpZXciOiIiLCJ2YWx1ZXMiOltdfV0sIm1vVHlwZU5hbWUiOiJjb20uY2xvdXBpYS5zZXJ2aWNlLmNJTS5pbmZyYW1nci5tZHVpLk1EVUlGaWVsZERlc2NyIiwidmFsaWRhdG9yTmFtZSI6Ik1EVUlGaWVsZExpc3RWYWxpZGF0b3IifX0sIm91dHB1dHMiOnsibGlzdCI6W3sibmFtZSI6IlNPRlRXQVJFTElTVFNJWkUiLCJkZXNjcmlwdGlvbiI6IiIsInR5cGUiOiJnZW5fdGV4dF9pbnB1dCJ9LHsibmFtZSI6IkRSSVZFTElTVFNJWkUiLCJkZXNjcmlwdGlvbiI6IiIsInR5cGUiOiJnZW5fdGV4dF9pbnB1dCJ9LHsibmFtZSI6Ik5JQ0xJU1RTSVpFIiwiZGVzY3JpcHRpb24iOiIiLCJ0eXBlIjoiZ2VuX3RleHRfaW5wdXQifV0sIm1vVHlwZU5hbWUiOiJjb20uY2xvdXBpYS5zZXJ2aWNlLmNJTS5pbmZyYW1nci5tZHVpLk1EVUlXb3JrZmxvd1Rhc2tPdXRwdXREZXNjciIsInZhbGlkYXRvck5hbWUiOiJNRFVJT3V0cHV0TGlzdFZhbGlkYXRvciJ9LCJleGVjdXRpb25MYW5nIjoiSmF2YXNjcmlwdCIsImV4ZWN1dGlvblNjcmlwdCI6Ii8vIFRoaXMgY2xhc3Mgd2lsbCBzZXQgdXAgYWxsIHRoZSBwb3N0IHByb3Zpc2lvbmluZyB3b3JrZmxvdyBwYXJhbWV0ZXJzIFxuLy8gdGhlcmUgYXJlIHNpeCBwcmUgLSBkZWZpbmVkIHRvcCBsZXZlbCB2YXJpYWJsZXMgaW4gYW55IENsb3VwaWEgU2NyaXB0OlxuLy8gY3R4dCwgbG9nZ2VyLCB1dGlsLCBpbnB1dCwgb3V0cHV0LCBhbmQgbWV0YWRhdGFcblxuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5tb2RlbC5jSU0pO1xuaW1wb3J0UGFja2FnZShqYXZhLnV0aWwpO1xuaW1wb3J0UGFja2FnZShqYXZhLmxhbmcpO1xuaW1wb3J0UGFja2FnZShqYXZhLmlvKTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubGliLnV0aWwpO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5tb2RlbC5jSU0pO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5zZXJ2aWNlLmNJTS5pbmZyYW1ncik7XG5pbXBvcnRQYWNrYWdlKG9yZy5hcGFjaGUuY29tbW9ucy5odHRwY2xpZW50KTtcbmltcG9ydFBhY2thZ2Uob3JnLmFwYWNoZS5jb21tb25zLmh0dHBjbGllbnQuY29va2llKTtcbmltcG9ydFBhY2thZ2Uob3JnLmFwYWNoZS5jb21tb25zLmh0dHBjbGllbnQubWV0aG9kcyk7XG5pbXBvcnRQYWNrYWdlKG9yZy5hcGFjaGUuY29tbW9ucy5odHRwY2xpZW50LmF1dGgpO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5tb2RlbC5jRXZlbnQubm90aWZ5KTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubGliLnV0aWwubWFpbCk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLmZ3Lm9ianN0b3JlKTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubGliLnV0aWwubWFuYWdlZHJlcG9ydHMpO1xuXG5sb2dnZXIuYWRkSW5mbyhcIi0tLS0tLS0tLS0tLS0tLS0tU1BSSU5ULVByb3Zpc2lvblZNLUFycmF5UHJvY2Vzc29yLS0tLS0tLS0tLS0tLS0tLVwiKTtcblxudmFyIFNPRlRXQVJFTElTVFNJWkUgPSBpbnB1dC5Tb2Z0d2FyZUxpc3RTaXplO1xudmFyIERSSVZFTElTVFNJWkUgPSBpbnB1dC5Ecml2ZUxpc3RTaXplO1xudmFyIE5JQ0xJU1RTSVpFID0gaW5wdXQuTklDTGlzdFNpemU7XG5cbnZhciBpbnRfU09GVFdBUkVMSVNUU0laRSA9IDA7XG52YXIgaW50X0RSSVZFTElTVFNJWkUgPSAwO1xudmFyIGludF9OSUNMSVNUU0laRSA9IDA7XG5cbnRyeSB7XG5cdGludF9TT0ZUV0FSRUxJU1RTSVpFID0gcGFyc2VJbnQoU09GVFdBUkVMSVNUU0laRSk7XG59IGNhdGNoIChlKSB7fVxuXG50cnkge1xuXHRpbnRfRFJJVkVMSVNUU0laRSA9IHBhcnNlSW50KERSSVZFTElTVFNJWkUpO1xufSBjYXRjaCAoZSkge31cblxudHJ5IHtcblx0aW50X05JQ0xJU1RTSVpFID0gcGFyc2VJbnQoTklDTElTVFNJWkUpO1xufSBjYXRjaCAoZSkge31cblxub3V0cHV0LlNPRlRXQVJFTElTVFNJWkUgPSBpbnRfU09GVFdBUkVMSVNUU0laRTtcbm91dHB1dC5EUklWRUxJU1RTSVpFID0gaW50X0RSSVZFTElTVFNJWkU7XG5vdXRwdXQuTklDTElTVFNJWkUgPSBpbnRfTklDTElTVFNJWkU7IiwiY29udHJvbGxlckltcGwiOnsibGlzdCI6W10sIm1vVHlwZU5hbWUiOiJjb20uY2xvdXBpYS5saWIuY01hY3JvVUkuTWFjcm9Db250cm9sbGVyU2NyaXB0IiwidmFsaWRhdG9yTmFtZSI6bnVsbH19"}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"SPRINT_NICTEST_LogPortGroups","taskLabel":"SPRINT_NICTEST_LogPortGroups","isActive":true,"taskSummary":"","taskDescription":"","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 2 inputs\r\n   PrivatePortGroup (Label: \'PrivatePortGroup\', Type: text, MappableType: vmwareVmPortGroupIdentity)\r\n   BackupPortGroup (Label: \'BackupPortGroup\', Type: text, MappableType: vmwareVmPortGroupIdentity)\r\n\r\nTask contains 0 outputs\r\n\r\n","taskData":"eyJuYW1lIjoiU1BSSU5UX05JQ1RFU1RfTG9nUG9ydEdyb3VwcyIsImxhYmVsIjoiU1BSSU5UX05JQ1RFU1RfTG9nUG9ydEdyb3VwcyIsInJlZ2lzdGVyVW5kZXJUcmVlIjoiU1BSSU5UIiwiaXNBY3RpdmUiOnRydWUsInN1bW1hcnkiOiIiLCJkZXNjcmlwdGlvbiI6IiIsInVjc2RGcm9tVmVyc2lvbiI6IjUuMy4yLjAiLCJjb25maWciOnsibmFtZSI6IklucHV0Q29uZmlnIiwiZmllbGRzIjp7Imxpc3QiOlt7Im5hbWUiOiJQcml2YXRlUG9ydEdyb3VwIiwibGFiZWwiOiJQcml2YXRlUG9ydEdyb3VwIiwicGVyc2lzdCI6dHJ1ZSwiY29sdW1uSW5mbyI6bnVsbCwidHlwZSI6InRleHQiLCJtYXBUb1R5cGUiOiJ2bXdhcmVWbVBvcnRHcm91cElkZW50aXR5IiwibWFuZGF0b3J5IjpmYWxzZSwicmJpZCI6IiIsInNpemUiOiJtZWRpdW0iLCJoZWxwIjoiIiwiYW5ub3RhdGlvbiI6IiIsImdyb3VwIjoiIiwidmFsaWRhdGUiOmZhbHNlLCJmb3JtTWFuYWdlZFRhYmxlIjpmYWxzZSwiYWRkRW50cnlGb3JtIjoiIiwiZWRpdEVudHJ5Rm9ybSI6IiIsImRlbGV0ZUVudHJ5Rm9ybSI6IiIsIm1vdmVVcEZvcm0iOiIiLCJtb3ZlRG93bkZvcm0iOiIiLCJpbmZvRW50cnlGb3JtIjoiIiwicnVuQWN0aW9uRm9ybSI6IiIsImVkaXRhYmUiOnRydWUsImhpZGRlbiI6ZmFsc2UsIm11bHRpbGluZSI6ZmFsc2UsIm1heExlbmd0aCI6MTI4LCJsb3YiOiIiLCJsb3ZQcm92aWRlciI6IiIsIm9yZGVyIjo5OTk5OSwidXBsb2FkRGlyIjoiIiwidGFibGUiOiIiLCJ2YWxpZGF0b3IiOiIiLCJyZWdleCI6Ii4qIiwicmVnZXhMYWJlbCI6Ii4qIiwibWluVmFsdWUiOi05MjIzMzcyMDM2ODU0Nzc1ODA4LCJtYXhWYWx1ZSI6OTIyMzM3MjAzNjg1NDc3NTgwNywiaGlkZUZpZWxkTmFtZSI6IiIsImhpZGVGaWVsZFZhbHVlIjoiIiwiaGlkZUZpZWxkQ29uZGl0aW9uIjoiRVEiLCJodG1sUG9wdXBUYWciOiIiLCJodG1sUG9wdXBMYWJlbCI6IiIsImh0bWxQb3B1cFN0eWxlIjowLCJodG1sUG9wdXBUZXh0IjoiIiwidmlldyI6IiIsInZhbHVlcyI6W119LHsibmFtZSI6IkJhY2t1cFBvcnRHcm91cCIsImxhYmVsIjoiQmFja3VwUG9ydEdyb3VwIiwicGVyc2lzdCI6dHJ1ZSwiY29sdW1uSW5mbyI6bnVsbCwidHlwZSI6InRleHQiLCJtYXBUb1R5cGUiOiJ2bXdhcmVWbVBvcnRHcm91cElkZW50aXR5IiwibWFuZGF0b3J5IjpmYWxzZSwicmJpZCI6IiIsInNpemUiOiJtZWRpdW0iLCJoZWxwIjoiIiwiYW5ub3RhdGlvbiI6IiIsImdyb3VwIjoiIiwidmFsaWRhdGUiOmZhbHNlLCJmb3JtTWFuYWdlZFRhYmxlIjpmYWxzZSwiYWRkRW50cnlGb3JtIjoiIiwiZWRpdEVudHJ5Rm9ybSI6IiIsImRlbGV0ZUVudHJ5Rm9ybSI6IiIsIm1vdmVVcEZvcm0iOiIiLCJtb3ZlRG93bkZvcm0iOiIiLCJpbmZvRW50cnlGb3JtIjoiIiwicnVuQWN0aW9uRm9ybSI6IiIsImVkaXRhYmUiOnRydWUsImhpZGRlbiI6ZmFsc2UsIm11bHRpbGluZSI6ZmFsc2UsIm1heExlbmd0aCI6MTI4LCJsb3YiOiIiLCJsb3ZQcm92aWRlciI6IiIsIm9yZGVyIjo5OTk5OSwidXBsb2FkRGlyIjoiIiwidGFibGUiOiIiLCJ2YWxpZGF0b3IiOiIiLCJyZWdleCI6Ii4qIiwicmVnZXhMYWJlbCI6Ii4qIiwibWluVmFsdWUiOi05MjIzMzcyMDM2ODU0Nzc1ODA4LCJtYXhWYWx1ZSI6OTIyMzM3MjAzNjg1NDc3NTgwNywiaGlkZUZpZWxkTmFtZSI6IiIsImhpZGVGaWVsZFZhbHVlIjoiIiwiaGlkZUZpZWxkQ29uZGl0aW9uIjoiRVEiLCJodG1sUG9wdXBUYWciOiIiLCJodG1sUG9wdXBMYWJlbCI6IiIsImh0bWxQb3B1cFN0eWxlIjowLCJodG1sUG9wdXBUZXh0IjoiIiwidmlldyI6IiIsInZhbHVlcyI6W119XSwibW9UeXBlTmFtZSI6ImNvbS5jbG91cGlhLnNlcnZpY2UuY0lNLmluZnJhbWdyLm1kdWkuTURVSUZpZWxkRGVzY3IiLCJ2YWxpZGF0b3JOYW1lIjoiTURVSUZpZWxkTGlzdFZhbGlkYXRvciJ9fSwib3V0cHV0cyI6eyJsaXN0IjpbXSwibW9UeXBlTmFtZSI6ImNvbS5jbG91cGlhLnNlcnZpY2UuY0lNLmluZnJhbWdyLm1kdWkuTURVSVdvcmtmbG93VGFza091dHB1dERlc2NyIiwidmFsaWRhdG9yTmFtZSI6Ik1EVUlPdXRwdXRMaXN0VmFsaWRhdG9yIn0sImV4ZWN1dGlvbkxhbmciOiJKYXZhc2NyaXB0IiwiZXhlY3V0aW9uU2NyaXB0IjoiLy8gdGhlcmUgYXJlIHNpeCBwcmUgLSBkZWZpbmVkIHRvcCBsZXZlbCB2YXJpYWJsZXMgaW4gYW55IENsb3VwaWEgU2NyaXB0OlxuLy8gY3R4dCwgbG9nZ2VyLCB1dGlsLCBpbnB1dCwgb3V0cHV0LCBhbmQgbWV0YWRhdGFcblxuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5tb2RlbC5jSU0pO1xuaW1wb3J0UGFja2FnZShqYXZhLnV0aWwpO1xuaW1wb3J0UGFja2FnZShqYXZhLmxhbmcpO1xuaW1wb3J0UGFja2FnZShqYXZhLmlvKTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubGliLnV0aWwpO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5tb2RlbC5jSU0pO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5zZXJ2aWNlLmNJTS5pbmZyYW1ncik7XG5pbXBvcnRQYWNrYWdlKG9yZy5hcGFjaGUuY29tbW9ucy5odHRwY2xpZW50KTtcbmltcG9ydFBhY2thZ2Uob3JnLmFwYWNoZS5jb21tb25zLmh0dHBjbGllbnQuY29va2llKTtcbmltcG9ydFBhY2thZ2Uob3JnLmFwYWNoZS5jb21tb25zLmh0dHBjbGllbnQubWV0aG9kcyk7XG5pbXBvcnRQYWNrYWdlKG9yZy5hcGFjaGUuY29tbW9ucy5odHRwY2xpZW50LmF1dGgpO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5tb2RlbC5jRXZlbnQubm90aWZ5KTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEubGliLnV0aWwubWFpbCk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLmZ3Lm9ianN0b3JlKTtcblxudmFyIFByaXZhdGVQb3J0R3JvdXBcdD0gaW5wdXQuUHJpdmF0ZVBvcnRHcm91cDtcbnZhciBCYWNrdXBQb3J0R3JvdXBcdD0gaW5wdXQuQmFja3VwUG9ydEdyb3VwO1xuXG5sb2dnZXIuYWRkSW5mbyhcIisrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrK1wiKTtcbmxvZ2dlci5hZGRJbmZvKFwiIFByaXZhdGVQb3J0R3JvdXAgPSBcIiArIFByaXZhdGVQb3J0R3JvdXApO1xubG9nZ2VyLmFkZEluZm8oXCIgQmFja3VwUG9ydEdyb3VwID0gXCIgKyBCYWNrdXBQb3J0R3JvdXApO1xubG9nZ2VyLmFkZEluZm8oXCIrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKytcIik7XG4iLCJjb250cm9sbGVySW1wbCI6eyJsaXN0IjpbXSwibW9UeXBlTmFtZSI6ImNvbS5jbG91cGlhLmxpYi5jTWFjcm9VSS5NYWNyb0NvbnRyb2xsZXJTY3JpcHQiLCJ2YWxpZGF0b3JOYW1lIjpudWxsfX0="}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><UnifiedFeatureAssetInfo><addiInfo></addiInfo><featureAssetEntry><data><![CDATA[{"taskName":"SPRINT_NICTEST_LogONEPortGroup","taskLabel":"SPRINT_NICTEST_LogONEPortGroup","isActive":true,"taskSummary":"","taskDescription":"","taskDetails":"\r\n<------- Task Information ------->\r\nTask contains 1 inputs\r\n   PortGroup (Label: \'PortGroup\', Type: text, MappableType: vmwareVmPortGroupIdentity)\r\n\r\nTask contains 0 outputs\r\n\r\n","taskData":"eyJuYW1lIjoiU1BSSU5UX05JQ1RFU1RfTG9nT05FUG9ydEdyb3VwIiwibGFiZWwiOiJTUFJJTlRfTklDVEVTVF9Mb2dPTkVQb3J0R3JvdXAiLCJyZWdpc3RlclVuZGVyVHJlZSI6IlNQUklOVCIsImlzQWN0aXZlIjp0cnVlLCJzdW1tYXJ5IjoiIiwiZGVzY3JpcHRpb24iOiIiLCJ1Y3NkRnJvbVZlcnNpb24iOiI1LjMuMi4wIiwiY29uZmlnIjp7Im5hbWUiOiJJbnB1dENvbmZpZyIsImZpZWxkcyI6eyJsaXN0IjpbeyJuYW1lIjoiUG9ydEdyb3VwIiwibGFiZWwiOiJQb3J0R3JvdXAiLCJwZXJzaXN0Ijp0cnVlLCJjb2x1bW5JbmZvIjpudWxsLCJ0eXBlIjoidGV4dCIsIm1hcFRvVHlwZSI6InZtd2FyZVZtUG9ydEdyb3VwSWRlbnRpdHkiLCJtYW5kYXRvcnkiOmZhbHNlLCJyYmlkIjoiIiwic2l6ZSI6Im1lZGl1bSIsImhlbHAiOiIiLCJhbm5vdGF0aW9uIjoiIiwiZ3JvdXAiOiIiLCJ2YWxpZGF0ZSI6ZmFsc2UsImZvcm1NYW5hZ2VkVGFibGUiOmZhbHNlLCJhZGRFbnRyeUZvcm0iOiIiLCJlZGl0RW50cnlGb3JtIjoiIiwiZGVsZXRlRW50cnlGb3JtIjoiIiwibW92ZVVwRm9ybSI6IiIsIm1vdmVEb3duRm9ybSI6IiIsImluZm9FbnRyeUZvcm0iOiIiLCJydW5BY3Rpb25Gb3JtIjoiIiwiZWRpdGFiZSI6dHJ1ZSwiaGlkZGVuIjpmYWxzZSwibXVsdGlsaW5lIjpmYWxzZSwibWF4TGVuZ3RoIjoxMjgsImxvdiI6IiIsImxvdlByb3ZpZGVyIjoiIiwib3JkZXIiOjk5OTk5LCJ1cGxvYWREaXIiOiIiLCJ0YWJsZSI6IiIsInZhbGlkYXRvciI6IiIsInJlZ2V4IjoiLioiLCJyZWdleExhYmVsIjoiLioiLCJtaW5WYWx1ZSI6LTkyMjMzNzIwMzY4NTQ3NzU4MDgsIm1heFZhbHVlIjo5MjIzMzcyMDM2ODU0Nzc1ODA3LCJoaWRlRmllbGROYW1lIjoiIiwiaGlkZUZpZWxkVmFsdWUiOiIiLCJoaWRlRmllbGRDb25kaXRpb24iOiJFUSIsImh0bWxQb3B1cFRhZyI6IiIsImh0bWxQb3B1cExhYmVsIjoiIiwiaHRtbFBvcHVwU3R5bGUiOjAsImh0bWxQb3B1cFRleHQiOiIiLCJ2aWV3IjoiIiwidmFsdWVzIjpbXX1dLCJtb1R5cGVOYW1lIjoiY29tLmNsb3VwaWEuc2VydmljZS5jSU0uaW5mcmFtZ3IubWR1aS5NRFVJRmllbGREZXNjciIsInZhbGlkYXRvck5hbWUiOiJNRFVJRmllbGRMaXN0VmFsaWRhdG9yIn19LCJvdXRwdXRzIjp7Imxpc3QiOltdLCJtb1R5cGVOYW1lIjoiY29tLmNsb3VwaWEuc2VydmljZS5jSU0uaW5mcmFtZ3IubWR1aS5NRFVJV29ya2Zsb3dUYXNrT3V0cHV0RGVzY3IiLCJ2YWxpZGF0b3JOYW1lIjoiTURVSU91dHB1dExpc3RWYWxpZGF0b3IifSwiZXhlY3V0aW9uTGFuZyI6IkphdmFzY3JpcHQiLCJleGVjdXRpb25TY3JpcHQiOiIvLyB0aGVyZSBhcmUgc2l4IHByZSAtIGRlZmluZWQgdG9wIGxldmVsIHZhcmlhYmxlcyBpbiBhbnkgQ2xvdXBpYSBTY3JpcHQ6XG4vLyBjdHh0LCBsb2dnZXIsIHV0aWwsIGlucHV0LCBvdXRwdXQsIGFuZCBtZXRhZGF0YVxuXG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLm1vZGVsLmNJTSk7XG5pbXBvcnRQYWNrYWdlKGphdmEudXRpbCk7XG5pbXBvcnRQYWNrYWdlKGphdmEubGFuZyk7XG5pbXBvcnRQYWNrYWdlKGphdmEuaW8pO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5saWIudXRpbCk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLm1vZGVsLmNJTSk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLnNlcnZpY2UuY0lNLmluZnJhbWdyKTtcbmltcG9ydFBhY2thZ2Uob3JnLmFwYWNoZS5jb21tb25zLmh0dHBjbGllbnQpO1xuaW1wb3J0UGFja2FnZShvcmcuYXBhY2hlLmNvbW1vbnMuaHR0cGNsaWVudC5jb29raWUpO1xuaW1wb3J0UGFja2FnZShvcmcuYXBhY2hlLmNvbW1vbnMuaHR0cGNsaWVudC5tZXRob2RzKTtcbmltcG9ydFBhY2thZ2Uob3JnLmFwYWNoZS5jb21tb25zLmh0dHBjbGllbnQuYXV0aCk7XG5pbXBvcnRQYWNrYWdlKGNvbS5jbG91cGlhLm1vZGVsLmNFdmVudC5ub3RpZnkpO1xuaW1wb3J0UGFja2FnZShjb20uY2xvdXBpYS5saWIudXRpbC5tYWlsKTtcbmltcG9ydFBhY2thZ2UoY29tLmNsb3VwaWEuZncub2Jqc3RvcmUpO1xuXG52YXIgUHJpdmF0ZVBvcnRHcm91cFx0PSBpbnB1dC5Qb3J0R3JvdXA7XG52YXIgQmFja3VwUG9ydEdyb3VwXHQ9IGlucHV0LkJhY2t1cFBvcnRHcm91cDtcblxubG9nZ2VyLmFkZEluZm8oXCIrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKytcIik7XG5sb2dnZXIuYWRkSW5mbyhcIiBpbnB1dC5Qb3J0R3JvdXAgPSBcIiArIFByaXZhdGVQb3J0R3JvdXApO1xubG9nZ2VyLmFkZEluZm8oXCIrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKysrKytcIik7XG4iLCJjb250cm9sbGVySW1wbCI6eyJsaXN0IjpbXSwibW9UeXBlTmFtZSI6ImNvbS5jbG91cGlhLmxpYi5jTWFjcm9VSS5NYWNyb0NvbnRyb2xsZXJTY3JpcHQiLCJ2YWxpZGF0b3JOYW1lIjpudWxsfX0="}]]></data></featureAssetEntry><type>CUSTOM_TASKS</type></UnifiedFeatureAssetInfo><version>3.0</version></OrchExportInfo>